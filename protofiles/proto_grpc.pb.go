// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuctionClient is the client API for Auction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionClient interface {
	Bid(ctx context.Context, in *Bidder, opts ...grpc.CallOption) (Auction_BidClient, error)
	Result(ctx context.Context, in *Bidder, opts ...grpc.CallOption) (Auction_ResultClient, error)
}

type auctionClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionClient(cc grpc.ClientConnInterface) AuctionClient {
	return &auctionClient{cc}
}

func (c *auctionClient) Bid(ctx context.Context, in *Bidder, opts ...grpc.CallOption) (Auction_BidClient, error) {
	stream, err := c.cc.NewStream(ctx, &Auction_ServiceDesc.Streams[0], "/gRPC.Auction/Bid", opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionBidClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Auction_BidClient interface {
	Recv() (*AuctionUpdate, error)
	grpc.ClientStream
}

type auctionBidClient struct {
	grpc.ClientStream
}

func (x *auctionBidClient) Recv() (*AuctionUpdate, error) {
	m := new(AuctionUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auctionClient) Result(ctx context.Context, in *Bidder, opts ...grpc.CallOption) (Auction_ResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &Auction_ServiceDesc.Streams[1], "/gRPC.Auction/Result", opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Auction_ResultClient interface {
	Recv() (*ResultAuctionUpdate, error)
	grpc.ClientStream
}

type auctionResultClient struct {
	grpc.ClientStream
}

func (x *auctionResultClient) Recv() (*ResultAuctionUpdate, error) {
	m := new(ResultAuctionUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuctionServer is the server API for Auction service.
// All implementations must embed UnimplementedAuctionServer
// for forward compatibility
type AuctionServer interface {
	Bid(*Bidder, Auction_BidServer) error
	Result(*Bidder, Auction_ResultServer) error
	mustEmbedUnimplementedAuctionServer()
}

// UnimplementedAuctionServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionServer struct {
}

func (UnimplementedAuctionServer) Bid(*Bidder, Auction_BidServer) error {
	return status.Errorf(codes.Unimplemented, "method Bid not implemented")
}
func (UnimplementedAuctionServer) Result(*Bidder, Auction_ResultServer) error {
	return status.Errorf(codes.Unimplemented, "method Result not implemented")
}
func (UnimplementedAuctionServer) mustEmbedUnimplementedAuctionServer() {}

// UnsafeAuctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionServer will
// result in compilation errors.
type UnsafeAuctionServer interface {
	mustEmbedUnimplementedAuctionServer()
}

func RegisterAuctionServer(s grpc.ServiceRegistrar, srv AuctionServer) {
	s.RegisterService(&Auction_ServiceDesc, srv)
}

func _Auction_Bid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Bidder)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuctionServer).Bid(m, &auctionBidServer{stream})
}

type Auction_BidServer interface {
	Send(*AuctionUpdate) error
	grpc.ServerStream
}

type auctionBidServer struct {
	grpc.ServerStream
}

func (x *auctionBidServer) Send(m *AuctionUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Auction_Result_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Bidder)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuctionServer).Result(m, &auctionResultServer{stream})
}

type Auction_ResultServer interface {
	Send(*ResultAuctionUpdate) error
	grpc.ServerStream
}

type auctionResultServer struct {
	grpc.ServerStream
}

func (x *auctionResultServer) Send(m *ResultAuctionUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// Auction_ServiceDesc is the grpc.ServiceDesc for Auction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC.Auction",
	HandlerType: (*AuctionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Bid",
			Handler:       _Auction_Bid_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Result",
			Handler:       _Auction_Result_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protofiles/proto.proto",
}
